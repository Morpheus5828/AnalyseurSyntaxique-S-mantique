Package sc;

Helpers
    lettre = [['a' .. 'z'] + ['A' .. 'Z']];
    chiffre = ['0' .. '9'];
    alpha = [lettre + ['_' + '$']];
    alphanum = [lettre + chiffre];

Tokens
    crochet_gauche = '[';
    crochet_droit = ']';
    parenthese_gauche = '(';
    parenthese_droite = ')';
    accolade_gauche = '{';
    accolade_droite = '}';

    si = 'si';
    sinon = 'sinon';
    alors = 'alors';
    tant_que = 'tantque';
    faire = 'faire';
    ecrire = 'ecrire';
    retour = 'retour';
    lire = 'lire';

    ou = '|';
    et = '&';
    egal = '=';
    inf = '<';
    plus = '+';
    moins = '-';
    mult = '*';
    div = '/';
    exclamation = '!';

    bool = 'bool';
    entier = 'entier';
    vrai = 'vrai';
    faux = 'faux';
    virgule = ',';
    point_virgule = ';';

    espace = (' ' | 13 | 10)+;
    commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
    nombre = chiffre+;
    identif = alpha alphanum*;

Ignored Tokens
    espace, commentaire;

Productions
    programme =
        liste_declaration_var liste_declaration_fonc;

    liste_declaration_var =
        declaration_var liste_declaration_var_prime |
        {vide} ;

    liste_declaration_var_prime =
        virgule declaration_var liste_declaration_var_prime |
        {vide} ;

    declaration_var =
        type identif |
        {tableau} type identif crochet_gauche nombre crochet_droit;


    liste_declaration_fonc =
        declaration_fonc liste_declaration_fonc |
        {vide} ;

    declaration_fonc =
        type_optionnel identif parenthese_gauche [argument]:liste_declaration_var parenthese_droite [var_locale]:liste_declaration_var bloc_instruction;

    type =
        {bool} bool |
        {entier} entier;

    type_optionnel =
        {type} type |
        {vide} ;


    bloc_instruction =
        accolade_gauche liste_instruction accolade_droite;

    liste_instruction =
        instruction liste_instruction |
        {vide} ;

    instruction =
        {affectation} var egal exp point_virgule |
        {si} si exp alors bloc_instruction |
        {si_sinon} si exp alors [si_instruction]:bloc_instruction sinon [sinon_instruction]:bloc_instruction |
        {tant_que} tant_que exp faire bloc_instruction |
        {retour} retour exp point_virgule |
        {appel_fonction} identif parenthese_gauche liste_exp parenthese_droite point_virgule |
        {ecrire} ecrire parenthese_gauche exp parenthese_droite point_virgule;


    var =
        identif |
        {tableau} identif crochet_gauche exp crochet_droit;

    liste_exp =
        exp liste_exp_prime |
        {vide} ;

    liste_exp_prime =
        virgule exp liste_exp_prime |
        {vide} ;

    exp =
        {ou} exp ou exp1 |
        {exp1} exp1;

    exp1 =
        {et} exp1 et exp2 |
        {exp2} exp2;

    exp2 =
        {egal} exp2 egal exp3 |
        {inf} exp2 inf exp3 |
        {exp3} exp3;

    exp3 =
        {plus} exp3 plus exp4 |
        {moins} exp3 moins exp4 |
        {exp4} exp4;

    exp4 =
        {mult} exp4 mult exp5 |
        {div} exp4 div exp5 |
        {exp5} exp5;

    exp5 =
        {non} exclamation exp5 |
        {exp6} exp6;

    exp6 =
        {entre_parantheses} parenthese_gauche exp parenthese_droite |
        {nombre} nombre |
        {vrai} vrai |
        {faux} faux |
        {appel_fonction} identif parenthese_gauche liste_exp parenthese_droite |
        {lire} lire parenthese_gauche parenthese_droite |
        {variable} var;