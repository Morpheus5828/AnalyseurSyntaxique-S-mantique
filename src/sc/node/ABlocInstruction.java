/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ABlocInstruction extends PBlocInstruction
{
    private TAccoladeGauche _accoladeGauche_;
    private PListeInstruction _listeInstruction_;
    private TAccoladeDroite _accoladeDroite_;

    public ABlocInstruction()
    {
        // Constructor
    }

    public ABlocInstruction(
        @SuppressWarnings("hiding") TAccoladeGauche _accoladeGauche_,
        @SuppressWarnings("hiding") PListeInstruction _listeInstruction_,
        @SuppressWarnings("hiding") TAccoladeDroite _accoladeDroite_)
    {
        // Constructor
        setAccoladeGauche(_accoladeGauche_);

        setListeInstruction(_listeInstruction_);

        setAccoladeDroite(_accoladeDroite_);

    }

    @Override
    public Object clone()
    {
        return new ABlocInstruction(
            cloneNode(this._accoladeGauche_),
            cloneNode(this._listeInstruction_),
            cloneNode(this._accoladeDroite_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlocInstruction(this);
    }

    public TAccoladeGauche getAccoladeGauche()
    {
        return this._accoladeGauche_;
    }

    public void setAccoladeGauche(TAccoladeGauche node)
    {
        if(this._accoladeGauche_ != null)
        {
            this._accoladeGauche_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accoladeGauche_ = node;
    }

    public PListeInstruction getListeInstruction()
    {
        return this._listeInstruction_;
    }

    public void setListeInstruction(PListeInstruction node)
    {
        if(this._listeInstruction_ != null)
        {
            this._listeInstruction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeInstruction_ = node;
    }

    public TAccoladeDroite getAccoladeDroite()
    {
        return this._accoladeDroite_;
    }

    public void setAccoladeDroite(TAccoladeDroite node)
    {
        if(this._accoladeDroite_ != null)
        {
            this._accoladeDroite_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accoladeDroite_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._accoladeGauche_)
            + toString(this._listeInstruction_)
            + toString(this._accoladeDroite_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._accoladeGauche_ == child)
        {
            this._accoladeGauche_ = null;
            return;
        }

        if(this._listeInstruction_ == child)
        {
            this._listeInstruction_ = null;
            return;
        }

        if(this._accoladeDroite_ == child)
        {
            this._accoladeDroite_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._accoladeGauche_ == oldChild)
        {
            setAccoladeGauche((TAccoladeGauche) newChild);
            return;
        }

        if(this._listeInstruction_ == oldChild)
        {
            setListeInstruction((PListeInstruction) newChild);
            return;
        }

        if(this._accoladeDroite_ == oldChild)
        {
            setAccoladeDroite((TAccoladeDroite) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
