/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AAxiomeProgramme extends PProgramme
{
    private PListeVar _listeVar_;
    private PListeFonc _listeFonc_;

    public AAxiomeProgramme()
    {
        // Constructor
    }

    public AAxiomeProgramme(
        @SuppressWarnings("hiding") PListeVar _listeVar_,
        @SuppressWarnings("hiding") PListeFonc _listeFonc_)
    {
        // Constructor
        setListeVar(_listeVar_);

        setListeFonc(_listeFonc_);

    }

    @Override
    public Object clone()
    {
        return new AAxiomeProgramme(
            cloneNode(this._listeVar_),
            cloneNode(this._listeFonc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAxiomeProgramme(this);
    }

    public PListeVar getListeVar()
    {
        return this._listeVar_;
    }

    public void setListeVar(PListeVar node)
    {
        if(this._listeVar_ != null)
        {
            this._listeVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeVar_ = node;
    }

    public PListeFonc getListeFonc()
    {
        return this._listeFonc_;
    }

    public void setListeFonc(PListeFonc node)
    {
        if(this._listeFonc_ != null)
        {
            this._listeFonc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeFonc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._listeVar_)
            + toString(this._listeFonc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._listeVar_ == child)
        {
            this._listeVar_ = null;
            return;
        }

        if(this._listeFonc_ == child)
        {
            this._listeFonc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._listeVar_ == oldChild)
        {
            setListeVar((PListeVar) newChild);
            return;
        }

        if(this._listeFonc_ == oldChild)
        {
            setListeFonc((PListeFonc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
