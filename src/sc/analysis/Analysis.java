/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAxiomeProgramme(AAxiomeProgramme node);
    void caseAListeVar(AListeVar node);
    void caseAVideListeVar(AVideListeVar node);
    void caseAListeVarPrime(AListeVarPrime node);
    void caseAVideListeVarPrime(AVideListeVarPrime node);
    void caseADeclarationVar(ADeclarationVar node);
    void caseATableauDeclarationVar(ATableauDeclarationVar node);
    void caseAListeFonc(AListeFonc node);
    void caseAVideListeFonc(AVideListeFonc node);
    void caseADeclarationFonc(ADeclarationFonc node);
    void caseABoolType(ABoolType node);
    void caseAEntierType(AEntierType node);
    void caseATypeTypeOptionnel(ATypeTypeOptionnel node);
    void caseAVideTypeOptionnel(AVideTypeOptionnel node);
    void caseABlocInstruction(ABlocInstruction node);
    void caseAListeInstruction(AListeInstruction node);
    void caseAVideListeInstruction(AVideListeInstruction node);
    void caseAAffectationInstruction(AAffectationInstruction node);
    void caseASiInstruction(ASiInstruction node);
    void caseASiSinonInstruction(ASiSinonInstruction node);
    void caseATantQueInstruction(ATantQueInstruction node);
    void caseARetourInstruction(ARetourInstruction node);
    void caseAAppelFonctionInstruction(AAppelFonctionInstruction node);
    void caseAEcrireInstruction(AEcrireInstruction node);
    void caseAVar(AVar node);
    void caseATableauVar(ATableauVar node);
    void caseAListeExpr(AListeExpr node);
    void caseAVideListeExpr(AVideListeExpr node);
    void caseAListeExprPrime(AListeExprPrime node);
    void caseAVideListeExprPrime(AVideListeExprPrime node);
    void caseAOuExpr(AOuExpr node);
    void caseAPrioriteSuivanteExpr(APrioriteSuivanteExpr node);
    void caseAEtExpr2(AEtExpr2 node);
    void caseAPrioriteSuivanteExpr2(APrioriteSuivanteExpr2 node);
    void caseAEgalExpr3(AEgalExpr3 node);
    void caseAInfExpr3(AInfExpr3 node);
    void caseAPrioriteSuivanteExpr3(APrioriteSuivanteExpr3 node);
    void caseAPlusExpr4(APlusExpr4 node);
    void caseAMoinsExpr4(AMoinsExpr4 node);
    void caseAPrioriteSuivanteExpr4(APrioriteSuivanteExpr4 node);
    void caseAMultExpr5(AMultExpr5 node);
    void caseADivExpr5(ADivExpr5 node);
    void caseAPrioriteSuivanteExpr5(APrioriteSuivanteExpr5 node);
    void caseANonExpr6(ANonExpr6 node);
    void caseAPrioriteSuivanteExpr6(APrioriteSuivanteExpr6 node);
    void caseAEntreParanthesesExpr7(AEntreParanthesesExpr7 node);
    void caseANombreExpr7(ANombreExpr7 node);
    void caseAVraiExpr7(AVraiExpr7 node);
    void caseAFauxExpr7(AFauxExpr7 node);
    void caseAAppelFonctionExpr7(AAppelFonctionExpr7 node);
    void caseALireExpr7(ALireExpr7 node);
    void caseAVariableExpr7(AVariableExpr7 node);

    void caseTCrochetGauche(TCrochetGauche node);
    void caseTCrochetDroit(TCrochetDroit node);
    void caseTParentheseGauche(TParentheseGauche node);
    void caseTParentheseDroite(TParentheseDroite node);
    void caseTAccoladeGauche(TAccoladeGauche node);
    void caseTAccoladeDroite(TAccoladeDroite node);
    void caseTSi(TSi node);
    void caseTSinon(TSinon node);
    void caseTAlors(TAlors node);
    void caseTTantQue(TTantQue node);
    void caseTFaire(TFaire node);
    void caseTEcrire(TEcrire node);
    void caseTRetour(TRetour node);
    void caseTLire(TLire node);
    void caseTOu(TOu node);
    void caseTEt(TEt node);
    void caseTEgal(TEgal node);
    void caseTInf(TInf node);
    void caseTPlus(TPlus node);
    void caseTMoins(TMoins node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTExclamation(TExclamation node);
    void caseTBool(TBool node);
    void caseTEntier(TEntier node);
    void caseTVrai(TVrai node);
    void caseTFaux(TFaux node);
    void caseTVirgule(TVirgule node);
    void caseTPointVirgule(TPointVirgule node);
    void caseTEspace(TEspace node);
    void caseTCommentaire(TCommentaire node);
    void caseTNombre(TNombre node);
    void caseTIdentif(TIdentif node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
