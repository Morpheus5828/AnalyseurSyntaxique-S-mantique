/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAxiome$1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAxiome$Vide1Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AListeVarPrime */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AVideListeVarPrime */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ADeclarationVar */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ATableauDeclarationVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AListeFonc */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AVideListeFonc */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce A1$2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce A1$2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce A1$Vide2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce A1$Vide2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AVide1$2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AVide1$2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AVide1$Vide2$Type1DeclarationFonc */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce AVide1$Vide2$Vide1DeclarationFonc */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce ABoolType */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AEntierType */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce ABlocInstruction */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AListeInstruction */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AVideListeInstruction */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AAffectationInstruction */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ASiInstruction */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ASiSinonInstruction */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce ATantQueInstruction */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce ARetourInstruction */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AAppelFonctionInstruction */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AEcrireInstruction */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AVar */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce ATableauVar */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce AListeExpr */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce AVideListeExpr */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AListeExprPrime */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AVideListeExprPrime */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AOuExpr */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce APrioriteSuivanteExpr */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AEtExpr2 */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce APrioriteSuivanteExpr2 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AEgalExpr3 */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce AInfExpr3 */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce APrioriteSuivanteExpr3 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce APlusExpr4 */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AMoinsExpr4 */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce APrioriteSuivanteExpr4 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AMultExpr5 */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce ADivExpr5 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce APrioriteSuivanteExpr5 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce ANonExpr6 */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce APrioriteSuivanteExpr6 */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce AEntreParanthesesExpr7 */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce ANombreExpr7 */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AVraiExpr7 */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list);
            }
            break;
            case 52: /* reduce AFauxExpr7 */
            {
                ArrayList<Object> list = new52();
                push(goTo(18), list);
            }
            break;
            case 53: /* reduce AAppelFonctionExpr7 */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list);
            }
            break;
            case 54: /* reduce ALireExpr7 */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce AVariableExpr7 */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAxiome$1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListeVar plistevarNode2;
        PListeFonc plistefoncNode5;
        {
            // Block
        PDeclarationVar pdeclarationvarNode3;
        PListeVarPrime plistevarprimeNode4;
        pdeclarationvarNode3 = (PDeclarationVar)nodeArrayList1.get(0);
        plistevarprimeNode4 = (PListeVarPrime)nodeArrayList2.get(0);

        plistevarNode2 = new AListeVar(pdeclarationvarNode3, plistevarprimeNode4);
        }
        plistefoncNode5 = (PListeFonc)nodeArrayList3.get(0);

        pprogrammeNode1 = new AAxiomeProgramme(plistevarNode2, plistefoncNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAxiome$Vide1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListeVar plistevarNode2;
        PListeFonc plistefoncNode3;
        {
            // Block

        plistevarNode2 = new AVideListeVar();
        }
        plistefoncNode3 = (PListeFonc)nodeArrayList1.get(0);

        pprogrammeNode1 = new AAxiomeProgramme(plistevarNode2, plistefoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListeVarPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeVarPrime plistevarprimeNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDeclarationVar pdeclarationvarNode3;
        PListeVarPrime plistevarprimeNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdeclarationvarNode3 = (PDeclarationVar)nodeArrayList2.get(0);
        plistevarprimeNode4 = (PListeVarPrime)nodeArrayList3.get(0);

        plistevarprimeNode1 = new AListeVarPrime(tvirguleNode2, pdeclarationvarNode3, plistevarprimeNode4);
        }
	nodeList.add(plistevarprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVideListeVarPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeVarPrime plistevarprimeNode1;
        {
            // Block

        plistevarprimeNode1 = new AVideListeVarPrime();
        }
	nodeList.add(plistevarprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclarationVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationVar pdeclarationvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pdeclarationvarNode1 = new ADeclarationVar(ptypeNode2, tidentifNode3);
        }
	nodeList.add(pdeclarationvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ATableauDeclarationVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationVar pdeclarationvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TCrochetGauche tcrochetgaucheNode4;
        TNombre tnombreNode5;
        TCrochetDroit tcrochetdroitNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tcrochetgaucheNode4 = (TCrochetGauche)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcrochetdroitNode6 = (TCrochetDroit)nodeArrayList5.get(0);

        pdeclarationvarNode1 = new ATableauDeclarationVar(ptypeNode2, tidentifNode3, tcrochetgaucheNode4, tnombreNode5, tcrochetdroitNode6);
        }
	nodeList.add(pdeclarationvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AListeFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeFonc plistefoncNode1;
        {
            // Block
        PDeclarationFonc pdeclarationfoncNode2;
        PListeFonc plistefoncNode3;
        pdeclarationfoncNode2 = (PDeclarationFonc)nodeArrayList1.get(0);
        plistefoncNode3 = (PListeFonc)nodeArrayList2.get(0);

        plistefoncNode1 = new AListeFonc(pdeclarationfoncNode2, plistefoncNode3);
        }
	nodeList.add(plistefoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVideListeFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeFonc plistefoncNode1;
        {
            // Block

        plistefoncNode1 = new AVideListeFonc();
        }
	nodeList.add(plistefoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce A1$2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeVar plistevarNode6;
        TParentheseDroite tparenthesedroiteNode9;
        PListeVar plistevarNode10;
        PBlocInstruction pblocinstructionNode13;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode7;
        PListeVarPrime plistevarprimeNode8;
        pdeclarationvarNode7 = (PDeclarationVar)nodeArrayList4.get(0);
        plistevarprimeNode8 = (PListeVarPrime)nodeArrayList5.get(0);

        plistevarNode6 = new AListeVar(pdeclarationvarNode7, plistevarprimeNode8);
        }
        tparenthesedroiteNode9 = (TParentheseDroite)nodeArrayList6.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode11;
        PListeVarPrime plistevarprimeNode12;
        pdeclarationvarNode11 = (PDeclarationVar)nodeArrayList7.get(0);
        plistevarprimeNode12 = (PListeVarPrime)nodeArrayList8.get(0);

        plistevarNode10 = new AListeVar(pdeclarationvarNode11, plistevarprimeNode12);
        }
        pblocinstructionNode13 = (PBlocInstruction)nodeArrayList9.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistevarNode6, tparenthesedroiteNode9, plistevarNode10, pblocinstructionNode13);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce A1$2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeVar plistevarNode5;
        TParentheseDroite tparenthesedroiteNode8;
        PListeVar plistevarNode9;
        PBlocInstruction pblocinstructionNode12;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode6;
        PListeVarPrime plistevarprimeNode7;
        pdeclarationvarNode6 = (PDeclarationVar)nodeArrayList3.get(0);
        plistevarprimeNode7 = (PListeVarPrime)nodeArrayList4.get(0);

        plistevarNode5 = new AListeVar(pdeclarationvarNode6, plistevarprimeNode7);
        }
        tparenthesedroiteNode8 = (TParentheseDroite)nodeArrayList5.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode10;
        PListeVarPrime plistevarprimeNode11;
        pdeclarationvarNode10 = (PDeclarationVar)nodeArrayList6.get(0);
        plistevarprimeNode11 = (PListeVarPrime)nodeArrayList7.get(0);

        plistevarNode9 = new AListeVar(pdeclarationvarNode10, plistevarprimeNode11);
        }
        pblocinstructionNode12 = (PBlocInstruction)nodeArrayList8.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistevarNode5, tparenthesedroiteNode8, plistevarNode9, pblocinstructionNode12);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce A1$Vide2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeVar plistevarNode6;
        TParentheseDroite tparenthesedroiteNode9;
        PListeVar plistevarNode10;
        PBlocInstruction pblocinstructionNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode7;
        PListeVarPrime plistevarprimeNode8;
        pdeclarationvarNode7 = (PDeclarationVar)nodeArrayList4.get(0);
        plistevarprimeNode8 = (PListeVarPrime)nodeArrayList5.get(0);

        plistevarNode6 = new AListeVar(pdeclarationvarNode7, plistevarprimeNode8);
        }
        tparenthesedroiteNode9 = (TParentheseDroite)nodeArrayList6.get(0);
        {
            // Block

        plistevarNode10 = new AVideListeVar();
        }
        pblocinstructionNode11 = (PBlocInstruction)nodeArrayList7.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistevarNode6, tparenthesedroiteNode9, plistevarNode10, pblocinstructionNode11);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce A1$Vide2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeVar plistevarNode5;
        TParentheseDroite tparenthesedroiteNode8;
        PListeVar plistevarNode9;
        PBlocInstruction pblocinstructionNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode6;
        PListeVarPrime plistevarprimeNode7;
        pdeclarationvarNode6 = (PDeclarationVar)nodeArrayList3.get(0);
        plistevarprimeNode7 = (PListeVarPrime)nodeArrayList4.get(0);

        plistevarNode5 = new AListeVar(pdeclarationvarNode6, plistevarprimeNode7);
        }
        tparenthesedroiteNode8 = (TParentheseDroite)nodeArrayList5.get(0);
        {
            // Block

        plistevarNode9 = new AVideListeVar();
        }
        pblocinstructionNode10 = (PBlocInstruction)nodeArrayList6.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistevarNode5, tparenthesedroiteNode8, plistevarNode9, pblocinstructionNode10);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVide1$2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeVar plistevarNode6;
        TParentheseDroite tparenthesedroiteNode7;
        PListeVar plistevarNode8;
        PBlocInstruction pblocinstructionNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block

        plistevarNode6 = new AVideListeVar();
        }
        tparenthesedroiteNode7 = (TParentheseDroite)nodeArrayList4.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode9;
        PListeVarPrime plistevarprimeNode10;
        pdeclarationvarNode9 = (PDeclarationVar)nodeArrayList5.get(0);
        plistevarprimeNode10 = (PListeVarPrime)nodeArrayList6.get(0);

        plistevarNode8 = new AListeVar(pdeclarationvarNode9, plistevarprimeNode10);
        }
        pblocinstructionNode11 = (PBlocInstruction)nodeArrayList7.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistevarNode6, tparenthesedroiteNode7, plistevarNode8, pblocinstructionNode11);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVide1$2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeVar plistevarNode5;
        TParentheseDroite tparenthesedroiteNode6;
        PListeVar plistevarNode7;
        PBlocInstruction pblocinstructionNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block

        plistevarNode5 = new AVideListeVar();
        }
        tparenthesedroiteNode6 = (TParentheseDroite)nodeArrayList3.get(0);
        {
            // Block
        PDeclarationVar pdeclarationvarNode8;
        PListeVarPrime plistevarprimeNode9;
        pdeclarationvarNode8 = (PDeclarationVar)nodeArrayList4.get(0);
        plistevarprimeNode9 = (PListeVarPrime)nodeArrayList5.get(0);

        plistevarNode7 = new AListeVar(pdeclarationvarNode8, plistevarprimeNode9);
        }
        pblocinstructionNode10 = (PBlocInstruction)nodeArrayList6.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistevarNode5, tparenthesedroiteNode6, plistevarNode7, pblocinstructionNode10);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVide1$Vide2$Type1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TParentheseGauche tparenthesegaucheNode5;
        PListeVar plistevarNode6;
        TParentheseDroite tparenthesedroiteNode7;
        PListeVar plistevarNode8;
        PBlocInstruction pblocinstructionNode9;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypeTypeOptionnel(ptypeNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParentheseGauche)nodeArrayList3.get(0);
        {
            // Block

        plistevarNode6 = new AVideListeVar();
        }
        tparenthesedroiteNode7 = (TParentheseDroite)nodeArrayList4.get(0);
        {
            // Block

        plistevarNode8 = new AVideListeVar();
        }
        pblocinstructionNode9 = (PBlocInstruction)nodeArrayList5.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode4, tparenthesegaucheNode5, plistevarNode6, tparenthesedroiteNode7, plistevarNode8, pblocinstructionNode9);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVide1$Vide2$Vide1DeclarationFonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFonc pdeclarationfoncNode1;
        {
            // Block
        PTypeOptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TParentheseGauche tparenthesegaucheNode4;
        PListeVar plistevarNode5;
        TParentheseDroite tparenthesedroiteNode6;
        PListeVar plistevarNode7;
        PBlocInstruction pblocinstructionNode8;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeOptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParentheseGauche)nodeArrayList2.get(0);
        {
            // Block

        plistevarNode5 = new AVideListeVar();
        }
        tparenthesedroiteNode6 = (TParentheseDroite)nodeArrayList3.get(0);
        {
            // Block

        plistevarNode7 = new AVideListeVar();
        }
        pblocinstructionNode8 = (PBlocInstruction)nodeArrayList4.get(0);

        pdeclarationfoncNode1 = new ADeclarationFonc(ptypeoptionnelNode2, tidentifNode3, tparenthesegaucheNode4, plistevarNode5, tparenthesedroiteNode6, plistevarNode7, pblocinstructionNode8);
        }
	nodeList.add(pdeclarationfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABlocInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocInstruction pblocinstructionNode1;
        {
            // Block
        TAccoladeGauche taccoladegaucheNode2;
        PListeInstruction plisteinstructionNode3;
        TAccoladeDroite taccoladedroiteNode4;
        taccoladegaucheNode2 = (TAccoladeGauche)nodeArrayList1.get(0);
        plisteinstructionNode3 = (PListeInstruction)nodeArrayList2.get(0);
        taccoladedroiteNode4 = (TAccoladeDroite)nodeArrayList3.get(0);

        pblocinstructionNode1 = new ABlocInstruction(taccoladegaucheNode2, plisteinstructionNode3, taccoladedroiteNode4);
        }
	nodeList.add(pblocinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AListeInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeInstruction plisteinstructionNode1;
        {
            // Block
        PInstruction pinstructionNode2;
        PListeInstruction plisteinstructionNode3;
        pinstructionNode2 = (PInstruction)nodeArrayList1.get(0);
        plisteinstructionNode3 = (PListeInstruction)nodeArrayList2.get(0);

        plisteinstructionNode1 = new AListeInstruction(pinstructionNode2, plisteinstructionNode3);
        }
	nodeList.add(plisteinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVideListeInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeInstruction plisteinstructionNode1;
        {
            // Block

        plisteinstructionNode1 = new AVideListeInstruction();
        }
	nodeList.add(plisteinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExpr pexprNode4;
        TPointVirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointVirgule)nodeArrayList4.get(0);

        pinstructionNode1 = new AAffectationInstruction(pvarNode2, tegalNode3, pexprNode4, tpointvirguleNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASiInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr pexprNode3;
        TAlors talorsNode4;
        PBlocInstruction pblocinstructionNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionNode5 = (PBlocInstruction)nodeArrayList4.get(0);

        pinstructionNode1 = new ASiInstruction(tsiNode2, pexprNode3, talorsNode4, pblocinstructionNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASiSinonInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr pexprNode3;
        TAlors talorsNode4;
        PBlocInstruction pblocinstructionNode5;
        TSinon tsinonNode6;
        PBlocInstruction pblocinstructionNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionNode5 = (PBlocInstruction)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pblocinstructionNode7 = (PBlocInstruction)nodeArrayList6.get(0);

        pinstructionNode1 = new ASiSinonInstruction(tsiNode2, pexprNode3, talorsNode4, pblocinstructionNode5, tsinonNode6, pblocinstructionNode7);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATantQueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TTantQue ttantqueNode2;
        PExpr pexprNode3;
        TFaire tfaireNode4;
        PBlocInstruction pblocinstructionNode5;
        ttantqueNode2 = (TTantQue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocinstructionNode5 = (PBlocInstruction)nodeArrayList4.get(0);

        pinstructionNode1 = new ATantQueInstruction(ttantqueNode2, pexprNode3, tfaireNode4, pblocinstructionNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARetourInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpr pexprNode3;
        TPointVirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointVirgule)nodeArrayList3.get(0);

        pinstructionNode1 = new ARetourInstruction(tretourNode2, pexprNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAppelFonctionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TParentheseGauche tparenthesegaucheNode3;
        PListeExpr plisteexprNode4;
        TParentheseDroite tparenthesedroiteNode5;
        TPointVirgule tpointvirguleNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        plisteexprNode4 = (PListeExpr)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParentheseDroite)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AAppelFonctionInstruction(tidentifNode2, tparenthesegaucheNode3, plisteexprNode4, tparenthesedroiteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEcrireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParentheseGauche tparenthesegaucheNode3;
        PExpr pexprNode4;
        TParentheseDroite tparenthesedroiteNode5;
        TPointVirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParentheseDroite)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AEcrireInstruction(tecrireNode2, tparenthesegaucheNode3, pexprNode4, tparenthesedroiteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarNode1 = new AVar(tidentifNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ATableauVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCrochetGauche tcrochetgaucheNode3;
        PExpr pexprNode4;
        TCrochetDroit tcrochetdroitNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tcrochetgaucheNode3 = (TCrochetGauche)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tcrochetdroitNode5 = (TCrochetDroit)nodeArrayList4.get(0);

        pvarNode1 = new ATableauVar(tidentifNode2, tcrochetgaucheNode3, pexprNode4, tcrochetdroitNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AListeExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExpr plisteexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PListeExprPrime plisteexprprimeNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        plisteexprprimeNode3 = (PListeExprPrime)nodeArrayList2.get(0);

        plisteexprNode1 = new AListeExpr(pexprNode2, plisteexprprimeNode3);
        }
	nodeList.add(plisteexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AVideListeExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeExpr plisteexprNode1;
        {
            // Block

        plisteexprNode1 = new AVideListeExpr();
        }
	nodeList.add(plisteexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AListeExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExprPrime plisteexprprimeNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpr pexprNode3;
        PListeExprPrime plisteexprprimeNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        plisteexprprimeNode4 = (PListeExprPrime)nodeArrayList3.get(0);

        plisteexprprimeNode1 = new AListeExprPrime(tvirguleNode2, pexprNode3, plisteexprprimeNode4);
        }
	nodeList.add(plisteexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AVideListeExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeExprPrime plisteexprprimeNode1;
        {
            // Block

        plisteexprprimeNode1 = new AVideListeExprPrime();
        }
	nodeList.add(plisteexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AOuExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOu touNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pexprNode1 = new AOuExpr(pexprNode2, touNode3, pexpr2Node4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce APrioriteSuivanteExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr2 pexpr2Node2;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);

        pexprNode1 = new APrioriteSuivanteExpr(pexpr2Node2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEtExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TEt tetNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AEtExpr2(pexpr2Node2, tetNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce APrioriteSuivanteExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);

        pexpr2Node1 = new APrioriteSuivanteExpr2(pexpr3Node2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEgalExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TEgal tegalNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AEgalExpr3(pexpr3Node2, tegalNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AInfExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TInf tinfNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AInfExpr3(pexpr3Node2, tinfNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce APrioriteSuivanteExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);

        pexpr3Node1 = new APrioriteSuivanteExpr3(pexpr4Node2);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APlusExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TPlus tplusNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new APlusExpr4(pexpr4Node2, tplusNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMoinsExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TMoins tmoinsNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AMoinsExpr4(pexpr4Node2, tmoinsNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce APrioriteSuivanteExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);

        pexpr4Node1 = new APrioriteSuivanteExpr4(pexpr5Node2);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMultExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        TMult tmultNode3;
        PExpr6 pexpr6Node4;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpr6Node4 = (PExpr6)nodeArrayList3.get(0);

        pexpr5Node1 = new AMultExpr5(pexpr5Node2, tmultNode3, pexpr6Node4);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADivExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        TDiv tdivNode3;
        PExpr6 pexpr6Node4;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpr6Node4 = (PExpr6)nodeArrayList3.get(0);

        pexpr5Node1 = new ADivExpr5(pexpr5Node2, tdivNode3, pexpr6Node4);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce APrioriteSuivanteExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr6 pexpr6Node2;
        pexpr6Node2 = (PExpr6)nodeArrayList1.get(0);

        pexpr5Node1 = new APrioriteSuivanteExpr5(pexpr6Node2);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANonExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TExclamation texclamationNode2;
        PExpr6 pexpr6Node3;
        texclamationNode2 = (TExclamation)nodeArrayList1.get(0);
        pexpr6Node3 = (PExpr6)nodeArrayList2.get(0);

        pexpr6Node1 = new ANonExpr6(texclamationNode2, pexpr6Node3);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce APrioriteSuivanteExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PExpr7 pexpr7Node2;
        pexpr7Node2 = (PExpr7)nodeArrayList1.get(0);

        pexpr6Node1 = new APrioriteSuivanteExpr6(pexpr7Node2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AEntreParanthesesExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TParentheseGauche tparenthesegaucheNode2;
        PExpr pexprNode3;
        TParentheseDroite tparenthesedroiteNode4;
        tparenthesegaucheNode2 = (TParentheseGauche)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tparenthesedroiteNode4 = (TParentheseDroite)nodeArrayList3.get(0);

        pexpr7Node1 = new AEntreParanthesesExpr7(tparenthesegaucheNode2, pexprNode3, tparenthesedroiteNode4);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANombreExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexpr7Node1 = new ANombreExpr7(tnombreNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AVraiExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pexpr7Node1 = new AVraiExpr7(tvraiNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFauxExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pexpr7Node1 = new AFauxExpr7(tfauxNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAppelFonctionExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TIdentif tidentifNode2;
        TParentheseGauche tparenthesegaucheNode3;
        PListeExpr plisteexprNode4;
        TParentheseDroite tparenthesedroiteNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        plisteexprNode4 = (PListeExpr)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParentheseDroite)nodeArrayList4.get(0);

        pexpr7Node1 = new AAppelFonctionExpr7(tidentifNode2, tparenthesegaucheNode3, plisteexprNode4, tparenthesedroiteNode5);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ALireExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TLire tlireNode2;
        TParentheseGauche tparenthesegaucheNode3;
        TParentheseDroite tparenthesedroiteNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParentheseGauche)nodeArrayList2.get(0);
        tparenthesedroiteNode4 = (TParentheseDroite)nodeArrayList3.get(0);

        pexpr7Node1 = new ALireExpr7(tlireNode2, tparenthesegaucheNode3, tparenthesedroiteNode4);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVariableExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpr7Node1 = new AVariableExpr7(pvarNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 7}, {23, SHIFT, 1}, {24, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 3}, {2, SHIFT, 9}, },
			{{-1, ERROR, 4}, {31, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 7}, {23, SHIFT, 1}, {24, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, ERROR, 8}, {30, SHIFT, 14}, },
			{{-1, ERROR, 9}, {3, SHIFT, 15}, {23, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, ERROR, 10}, {23, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, REDUCE, 7}, {23, SHIFT, 1}, {24, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 13}, {30, SHIFT, 20}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 21}, {2, SHIFT, 22}, },
			{{-1, ERROR, 15}, {4, SHIFT, 23}, {23, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, ERROR, 17}, {30, SHIFT, 27}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 20}, {2, SHIFT, 22}, },
			{{-1, ERROR, 21}, {29, SHIFT, 29}, },
			{{-1, ERROR, 22}, {3, SHIFT, 30}, {23, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, REDUCE, 20}, {6, SHIFT, 32}, {9, SHIFT, 33}, {11, SHIFT, 34}, {12, SHIFT, 35}, {30, SHIFT, 36}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 26}, {3, SHIFT, 41}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 21}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 29}, {1, SHIFT, 42}, },
			{{-1, ERROR, 30}, {4, SHIFT, 23}, {23, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, ERROR, 32}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 33}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 34}, {2, SHIFT, 62}, },
			{{-1, ERROR, 35}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 28}, {0, SHIFT, 64}, {2, SHIFT, 65}, },
			{{-1, ERROR, 37}, {5, SHIFT, 66}, },
			{{-1, REDUCE, 20}, {6, SHIFT, 32}, {9, SHIFT, 33}, {11, SHIFT, 34}, {12, SHIFT, 35}, {30, SHIFT, 36}, },
			{{-1, ERROR, 39}, {16, SHIFT, 68}, },
			{{-1, ERROR, 40}, {4, SHIFT, 23}, },
			{{-1, ERROR, 41}, {4, SHIFT, 23}, {23, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 45}, {3, SHIFT, 73}, },
			{{-1, ERROR, 46}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 47}, {2, SHIFT, 75}, },
			{{-1, ERROR, 48}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 28}, {0, SHIFT, 64}, {2, SHIFT, 77}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 54}, {8, SHIFT, 78}, {14, SHIFT, 79}, },
			{{-1, REDUCE, 35}, {15, SHIFT, 80}, },
			{{-1, REDUCE, 37}, {16, SHIFT, 81}, {17, SHIFT, 82}, },
			{{-1, REDUCE, 40}, {18, SHIFT, 83}, {19, SHIFT, 84}, },
			{{-1, REDUCE, 43}, {20, SHIFT, 85}, {21, SHIFT, 86}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 61}, {10, SHIFT, 87}, {14, SHIFT, 79}, },
			{{-1, ERROR, 62}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 63}, {14, SHIFT, 79}, {28, SHIFT, 89}, },
			{{-1, ERROR, 64}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 68}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 72}, {4, SHIFT, 23}, },
			{{-1, ERROR, 73}, {4, SHIFT, 23}, {23, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, ERROR, 74}, {3, SHIFT, 98}, {14, SHIFT, 79}, },
			{{-1, ERROR, 75}, {3, SHIFT, 99}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 78}, {4, SHIFT, 23}, },
			{{-1, ERROR, 79}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 80}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 81}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 82}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 83}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 84}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 85}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 86}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 87}, {4, SHIFT, 23}, },
			{{-1, ERROR, 88}, {3, SHIFT, 111}, {14, SHIFT, 79}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 90}, {1, SHIFT, 112}, {14, SHIFT, 79}, },
			{{-1, ERROR, 91}, {3, SHIFT, 113}, },
			{{-1, REDUCE, 33}, {14, SHIFT, 79}, {27, SHIFT, 114}, },
			{{-1, ERROR, 93}, {14, SHIFT, 79}, {28, SHIFT, 116}, },
			{{-1, ERROR, 94}, {4, SHIFT, 23}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 3}, {27, SHIFT, 10}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 100}, {3, SHIFT, 119}, },
			{{-1, REDUCE, 22}, {7, SHIFT, 120}, },
			{{-1, REDUCE, 34}, {15, SHIFT, 80}, },
			{{-1, REDUCE, 36}, {16, SHIFT, 81}, {17, SHIFT, 82}, },
			{{-1, REDUCE, 38}, {18, SHIFT, 83}, {19, SHIFT, 84}, },
			{{-1, REDUCE, 39}, {18, SHIFT, 83}, {19, SHIFT, 84}, },
			{{-1, REDUCE, 41}, {20, SHIFT, 85}, {21, SHIFT, 86}, },
			{{-1, REDUCE, 42}, {20, SHIFT, 85}, {21, SHIFT, 86}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 111}, {28, SHIFT, 121}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 113}, {28, SHIFT, 122}, },
			{{-1, ERROR, 114}, {2, SHIFT, 46}, {13, SHIFT, 47}, {22, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {29, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 118}, {4, SHIFT, 23}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 120}, {4, SHIFT, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 33}, {14, SHIFT, 79}, {27, SHIFT, 114}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 32}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 11}, {16, 26}, {18, 28}, {24, 40}, {31, 45}, {43, 72}, {70, 94}, {96, 118}, },
			{{-1, 5}, {9, 16}, {10, 18}, {15, 24}, {22, 31}, {30, 43}, {41, 70}, {73, 96}, },
			{{-1, 6}, {7, 12}, {11, 19}, },
			{{-1, 7}, },
			{{-1, 17}, {0, 8}, {7, 13}, {11, 13}, },
			{{-1, 25}, {30, 44}, {40, 69}, {41, 71}, {72, 95}, {73, 97}, {78, 101}, {87, 110}, {94, 117}, {118, 124}, {120, 125}, },
			{{-1, 37}, {38, 67}, },
			{{-1, 38}, },
			{{-1, 53}, {23, 39}, {38, 39}, },
			{{-1, 91}, {77, 100}, },
			{{-1, 115}, {123, 126}, },
			{{-1, 92}, {32, 54}, {33, 61}, {35, 63}, {46, 74}, {62, 88}, {64, 90}, {68, 93}, {114, 123}, },
			{{-1, 55}, {79, 102}, },
			{{-1, 56}, {80, 103}, },
			{{-1, 57}, {81, 104}, {82, 105}, },
			{{-1, 58}, {83, 106}, {84, 107}, },
			{{-1, 59}, {48, 76}, {85, 108}, {86, 109}, },
			{{-1, 60}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'bool', 'entier', identif, EOF",
			"expecting: identif",
			"expecting: '('",
			"expecting: EOF",
			"expecting: 'bool', 'entier', ',', identif, EOF",
			"expecting: ')', 'bool', 'entier'",
			"expecting: 'bool', 'entier'",
			"expecting: '[', '(', 'bool', 'entier', ',', identif, EOF",
			"expecting: '{', 'bool', 'entier'",
			"expecting: ')', ','",
			"expecting: ')', '{', 'bool', 'entier', ',', identif, EOF",
			"expecting: nombre",
			"expecting: '}', 'si', 'tantque', 'ecrire', 'retour', identif",
			"expecting: '{', ','",
			"expecting: ')'",
			"expecting: '[', ')', '{', 'bool', 'entier', ',', identif, EOF",
			"expecting: ')', '{', 'bool', 'entier', identif, EOF",
			"expecting: ']'",
			"expecting: '(', 'lire', '!', 'vrai', 'faux', nombre, identif",
			"expecting: '[', '(', '='",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '{'",
			"expecting: ']', ')', 'alors', 'faire', '|', '&', '=', '<', '+', '-', '*', '/', ',', ';'",
			"expecting: '[', ']', '(', ')', 'alors', 'faire', '|', '&', '=', '<', '+', '-', '*', '/', ',', ';'",
			"expecting: 'alors', '|'",
			"expecting: ']', ')', 'alors', 'faire', '|', '&', ',', ';'",
			"expecting: ']', ')', 'alors', 'faire', '|', '&', '=', '<', ',', ';'",
			"expecting: ']', ')', 'alors', 'faire', '|', '&', '=', '<', '+', '-', ',', ';'",
			"expecting: 'faire', '|'",
			"expecting: '|', ';'",
			"expecting: '(', ')', 'lire', '!', 'vrai', 'faux', nombre, identif",
			"expecting: '}', 'si', 'sinon', 'tantque', 'ecrire', 'retour', 'bool', 'entier', identif, EOF",
			"expecting: ')', '|'",
			"expecting: ']', '|'",
			"expecting: ')', '|', ','",
			"expecting: '}', 'si', 'sinon', 'tantque', 'ecrire', 'retour', identif",
			"expecting: ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 3, 0, 1, 5, 6, 0, 3, 1, 7, 8, 9, 1, 10, 3, 2, 11, 5, 12, 13, 0, 14, 15, 16, 17, 8, 9, 18, 18, 2, 18, 19, 20, 12, 21, 22, 8, 10, 13, 0, 14, 18, 2, 18, 23, 23, 23, 24, 23, 25, 26, 27, 28, 23, 23, 23, 29, 18, 30, 18, 31, 32, 20, 18, 0, 13, 0, 22, 8, 33, 14, 23, 31, 22, 18, 18, 18, 18, 18, 18, 18, 18, 22, 33, 12, 34, 14, 35, 30, 22, 0, 13, 0, 23, 23, 14, 36, 26, 27, 28, 28, 23, 23, 23, 23, 12, 37, 23, 37, 18, 14, 12, 0, 22, 23, 22, 12, 12, 35, 0, 12, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
